package ${context.getProperty("namespace")}.client.entity;

#if(${type.hasMany()})
import java.util.List;
import java.util.ArrayList;

#end
#if(${util.isBlank(${type.getGeneralization()})})
import java.io.Serializable;

public#if(${type.isAbstractEntity()}) abstract#end class ${type.name}Proxy implements Serializable, Proxy {
#if(! ${type.hasTag("transient")})
    private Long id;
#end
#else
public#if(${type.isAbstractEntity()}) abstract#end class ${type.name}Proxy extends ${type.getGeneralization().getName()}Proxy implements Proxy {
#end
#foreach($p in ${type.properties})
#if(${p.hasTag("input")})
#if(${p.getTagValue("input").equals("date")})
    private String ${p.name}Month;
    private String ${p.name}Day;
    private String ${p.name}Year;
    private ${p.type} ${p.name};
#elseif(${p.getTagValue("input").equals("phone")})
    private String ${p.name}1;
    private String ${p.name}2;
    private String ${p.name}3;
#end
#elseif(${model.isEnumeration(${p.type})})
    private ${p.type}Proxy ${p.name};
#else
    private ${p.type} ${p.name};
#end
#end
#foreach($ass in ${type.getOneToMany()})
#if(${ass.isOwner()})
    private List<${ass.entity.name}Proxy> ${ass.name}List;
#else
    private ${ass.entity.name}Proxy ${ass.name};
#end
#end
#foreach($ass in ${type.getManyToOne()})
    private ${ass.entity.name}Proxy ${ass.name};
#end
#foreach($ass in ${type.getManyToMany()})
    private List<${ass.entity.name}Proxy> ${ass.name}List;
#end
#foreach($ass in ${type.getOneToOne()})
    private ${ass.entity.name}Proxy ${ass.name};
#end
#if(${util.isBlank(${type.getGeneralization()})})
#if(! ${type.hasTag("transient")})

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }
#end
#end
#foreach($p in ${type.properties})
#if(${p.hasTag("input")})
#if(${p.getTagValue("input").equals("date")})

    public String get${util.capitalize(${p.name})}Month() {
        return ${p.name}Month;
    }

    public void set${util.capitalize(${p.name})}Month(String ${p.name}Month) {
        this.${p.name}Month = ${p.name}Month;
    }

    public String get${util.capitalize(${p.name})}Day() {
        return ${p.name}Day;
    }

    public void set${util.capitalize(${p.name})}Day(String ${p.name}Day) {
        this.${p.name}Day = ${p.name}Day;
    }

    public String get${util.capitalize(${p.name})}Year() {
        return ${p.name}Year;
    }

    public void set${util.capitalize(${p.name})}Year(String ${p.name}Year) {
        this.${p.name}Year = ${p.name}Year;
    }

    public ${p.type} get${util.capitalize(${p.name})}() {
        return ${p.name};
    }

    public void set${util.capitalize(${p.name})}(${p.type} ${p.name}) {
        this.${p.name} = ${p.name};
    }
#elseif(${p.getTagValue("input").equals("phone")})

    public String get${util.capitalize(${p.name})}1() {
        return ${p.name}1;
    }

    public void set${util.capitalize(${p.name})}1(String ${p.name}1) {
        this.${p.name}1 = ${p.name}1;
    }

    public String get${util.capitalize(${p.name})}2() {
        return ${p.name}2;
    }

    public void set${util.capitalize(${p.name})}2(String ${p.name}2) {
        this.${p.name}2 = ${p.name}2;
    }

    public String get${util.capitalize(${p.name})}3() {
        return ${p.name}3;
    }

    public void set${util.capitalize(${p.name})}3(String ${p.name}3) {
        this.${p.name}3 = ${p.name}3;
    }
#end
#elseif(${model.isEnumeration(${p.type})})

    public ${p.type}Proxy get${util.capitalize(${p.name})}() {
        return ${p.name};
    }

    public void set${util.capitalize(${p.name})}(${p.type}Proxy ${p.name}) {
        this.${p.name} = ${p.name};
    }
#else

    public ${p.type} get${util.capitalize(${p.name})}() {
        return ${p.name};
    }

    public void set${util.capitalize(${p.name})}(${p.type} ${p.name}) {
        this.${p.name} = ${p.name};
    }
#end
#end
#if(${type.hasTag("businessKey")})

    @Override
    public String toString() {
        return ${type.getTagValue("businessKey")}.toString();
    }
#end
#if(! ${type.hasTag("transient")})

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (getId() != null ? getId().hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof ${type.name}Proxy)) {
            return false;
        }
        ${type.name}Proxy other = (${type.name}Proxy) object;
        if ((this.getId() == null && other.getId() != null) || (this.getId() != null && !this.getId().equals(other.getId()))) {
            return false;
        }
        return true;
    }
#end

#parse("client.entity.proxy.one.to.many.vm")
#parse("client.entity.proxy.many.to.one.vm")
#parse("client.entity.proxy.many.to.many.vm")
#parse("client.entity.proxy.one.to.one.vm")

}