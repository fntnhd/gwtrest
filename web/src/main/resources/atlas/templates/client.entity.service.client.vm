package ${context.getProperty("namespace")}.client.service;

import com.google.gwt.core.client.GWT;
import com.google.gwt.user.client.rpc.AsyncCallback;
import ${context.getProperty("namespace")}.client.entity.*;
import java.util.List;

public class ${type.name}DataServiceClient {
#if(! ${type.isAbstractEntity()} )

    /**
     * Find All ${type.name}
     */
    public void findAll${type.name}(final FindAll${type.name}ServiceClient client) {
        ${type.name}DataServiceRemoteAsync async = GWT.create(${type.name}DataServiceRemote.class);
        AsyncCallback<List<${type.name}Proxy>> callback = new AsyncCallback<List<${type.name}Proxy>>() {

            @Override
            public void onFailure(Throwable caught) {
                if(caught.toString().indexOf("view: \"InvalidSessionView\"") > -1) {
                    navigate("invalidSession");
                } else {
                    client.findAll${type.name}Failure(caught);
                }
            }

            @Override
            public void onSuccess(List<${type.name}Proxy> result) {
                client.findAll${type.name}Success(result);
            }
        };

        async.findAll${type.name}(callback);
    }

    public interface FindAll${type.name}ServiceClient {

        public void findAll${type.name}Failure(Throwable caught);

        public void findAll${type.name}Success(List<${type.name}Proxy> result);

    }


    /**
     * Find ${type.name} By Id
     */
    public void find${type.name}ById(Long id, final Find${type.name}ByIdServiceClient client) {
        ${type.name}DataServiceRemoteAsync async = GWT.create(${type.name}DataServiceRemote.class);
        AsyncCallback<${type.name}Proxy> callback = new AsyncCallback<${type.name}Proxy>() {

            @Override
            public void onFailure(Throwable caught) {
                if(caught.toString().indexOf("view: \"InvalidSessionView\"") > -1) {
                    navigate("invalidSession");
                } else {
                    client.find${type.name}ByIdFailure(caught);
                }                
            }

            @Override
            public void onSuccess(${type.name}Proxy result) {
                client.find${type.name}ByIdSuccess(result);
            }
        };

        async.find${type.name}ById(id, callback);
    }

    public interface Find${type.name}ByIdServiceClient {

        public void find${type.name}ByIdFailure(Throwable caught);

        public void find${type.name}ByIdSuccess(${type.name}Proxy result);

    }



    /**
     * Save ${type.name}
     */
    public void save${type.name}(${type.name}Proxy ${util.uncapitalize(${type.name})}, final Save${type.name}ServiceClient client) {
        ${type.name}DataServiceRemoteAsync async = GWT.create(${type.name}DataServiceRemote.class);
        AsyncCallback<${type.name}Proxy> callback = new AsyncCallback<${type.name}Proxy>() {

            @Override
            public void onFailure(Throwable caught) {
                if(caught.toString().indexOf("view: \"InvalidSessionView\"") > -1) {
                    navigate("invalidSession");
                } else {
                    client.save${type.name}Failure(caught);
                }
            }

            @Override
            public void onSuccess(${type.name}Proxy result) {
                client.save${type.name}Success(result);
            }
        };

        async.save${type.name}(${util.uncapitalize(${type.name})}, callback);
    }

    public interface Save${type.name}ServiceClient {

        public void save${type.name}Failure(Throwable caught);

        public void save${type.name}Success(${type.name}Proxy result);

    }



    /**
     * Delete ${type.name}
     */
    public void delete${type.name}(Long id, final Delete${type.name}ServiceClient client) {
        ${type.name}DataServiceRemoteAsync async = GWT.create(${type.name}DataServiceRemote.class);
        AsyncCallback<Void> callback = new AsyncCallback<Void>() {

            @Override
            public void onFailure(Throwable caught) {
                if(caught.toString().indexOf("view: \"InvalidSessionView\"") > -1) {
                    navigate("invalidSession");
                } else {
                    client.delete${type.name}Failure(caught);
                }
            }

            @Override
            public void onSuccess(Void result) {
                client.delete${type.name}Success(result);
            }
        };

        async.delete${type.name}(id, callback);
    }

    public interface Delete${type.name}ServiceClient {

        public void delete${type.name}Failure(Throwable caught);

        public void delete${type.name}Success(Void result);

    }
#if(${type.hasTag("businessKey")})
#set($businessKey = ${type.getTagValue("businessKey")})


    /**
     * Finds a ${type.name} by $businessKey
     * @return ${type.name}
     */
    public void find${type.name}By${util.capitalize($businessKey)}(String $businessKey, final Find${type.name}By${util.capitalize($businessKey)}ServiceClient client) {

        ${type.name}DataServiceRemoteAsync async = GWT.create(${type.name}DataServiceRemote.class);
        AsyncCallback<${type.name}Proxy> callback = new AsyncCallback<${type.name}Proxy>() {

            @Override
            public void onFailure(Throwable caught) {
                if(caught.toString().indexOf("view: \"InvalidSessionView\"") > -1) {
                    navigate("invalidSession");
                } else {
                    client.find${type.name}By${util.capitalize($businessKey)}Failure(caught);
                }
            }

            @Override
            public void onSuccess(${type.name}Proxy result) {
                client.find${type.name}By${util.capitalize($businessKey)}Success(result);
            }
        };

        async.find${type.name}By${util.capitalize($businessKey)}($businessKey, callback);
    }

    public interface Find${type.name}By${util.capitalize($businessKey)}ServiceClient {

        public void find${type.name}By${util.capitalize($businessKey)}Failure(Throwable caught);

        public void find${type.name}By${util.capitalize($businessKey)}Success(${type.name}Proxy result);

    }
    
#end
#end

   public native void navigate(String url) /*-{
        $wnd.location = "/cps-web/" + url;
   }-*/;

}