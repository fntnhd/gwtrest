package ${context.getProperty("namespace")}.server.service;

import ${context.getProperty("namespace")}.client.validate.*;
import ${context.getProperty("namespace")}.server.validate.*;
import ${context.getProperty("namespace")}.server.transfer.ValidationErrorTransfer;
import ${context.getProperty("namespace")}.client.entity.*;
import ${context.getProperty("namespace")}.client.service.${type.name}Remote;
import java.util.List;

public class ${type.name}Servlet extends ServiceServlet implements ${type.name}Remote {
#foreach($op in $type.operations)

    /**
#if(${util.isBlank(${op.documentation})})
     * ${op.name}
#else
     * ${op.documentation}
#end
#foreach($p in ${op.parameters})
     * @param ${p.name}
#end
#if(!${op.getReturnType().equals("void")})
     * @return ${op.returnType}
#end
#foreach($p in ${op.parameters})
     * @see ${p.type}
#end
     */
    public #parse("client.service.op.return.vm") ${op.name}(#parse("client.service.op.signature.vm")) throws ClientValidationException {
        try {
            throw new ValidationException();
        }
        catch(ValidationException ex) {
            List<ValidationErrorProxy> errorList = ValidationErrorTransfer.transferToProxy(ex.getErrors());
            throw new ClientValidationException(errorList);
        }
    }
#end

}