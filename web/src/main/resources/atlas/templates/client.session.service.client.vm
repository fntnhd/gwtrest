package ${context.getProperty("namespace")}.client.service;

import ${context.getProperty("namespace")}.client.entity.*;
import com.google.gwt.core.client.GWT;
import com.google.gwt.user.client.rpc.AsyncCallback;

import java.util.List;

public class SessionServiceClient {

    /**
     * Get the secured user from the session
     */
    public void getUser(final GetUserClient client) {
        SessionServiceRemoteAsync async = GWT.create(SessionServiceRemote.class);
        AsyncCallback<UserProxy> callback = new AsyncCallback<UserProxy>() {

            @Override
            public void onFailure(Throwable caught) {
                if(caught.toString().indexOf("view: \"InvalidSessionView\"") > -1) {
                    navigate("invalidSession");
                } else {
                    client.getUserFailure(caught);
                }
            }

            @Override
            public void onSuccess(UserProxy result) {
                client.getUserSuccess(result);
            }
        };

        async.getUser(callback);

    }


    public interface GetUserClient {

        public void getUserFailure(Throwable caught);

        public void getUserSuccess(UserProxy result);
    }


    /**
     * Get the unsecured user from the session
     */
    public void getUnsecuredUser(final GetUnsecuredUserClient client) {
        SessionServiceRemoteAsync async = GWT.create(SessionServiceRemote.class);
        AsyncCallback<UserProxy> callback = new AsyncCallback<UserProxy>() {

            @Override
            public void onFailure(Throwable caught) {
                if(caught.toString().indexOf("view: \"InvalidSessionView\"") > -1) {
                    navigate("invalidSession");
                } else {
                    client.getUnsecuredUserFailure(caught);
                }
            }

            @Override
            public void onSuccess(UserProxy result) {
                client.getUnsecuredUserSuccess(result);
            }
        };

        async.getUnsecuredUser(callback);

    }


    public interface GetUnsecuredUserClient {

        public void getUnsecuredUserFailure(Throwable caught);

        public void getUnsecuredUserSuccess(UserProxy result);
    }

    /**
     * Get the unsecured user from the session
     */
    public void getLoginMessage(final GetLoginMessageClient client) {
        SessionServiceRemoteAsync async = GWT.create(SessionServiceRemote.class);
        AsyncCallback<String> callback = new AsyncCallback<String>() {

            @Override
            public void onFailure(Throwable caught) {
                if(caught.toString().indexOf("view: \"InvalidSessionView\"") > -1) {
                    navigate("invalidSession");
                } else {
                    client.getLoginMessageFailure(caught);
                }
            }

            @Override
            public void onSuccess(String result) {
                client.getLoginMessageSuccess(result);
            }
        };

        async.getLoginMessage(callback);

    }

    public interface GetLoginMessageClient {

        public void getLoginMessageFailure(Throwable caught);

        public void getLoginMessageSuccess(String result);
    }

    public void getRequestUrl(final GetRequestUrlClient client) {
        SessionServiceRemoteAsync async = GWT.create(SessionServiceRemote.class);
        AsyncCallback<String> callback = new AsyncCallback<String>() {

            @Override
            public void onFailure(Throwable caught) {
                if(caught.toString().indexOf("view: \"InvalidSessionView\"") > -1) {
                    navigate("invalidSession");
                } else {
                    client.getRequestUrlFailure(caught);
                }
            }

            @Override
            public void onSuccess(String result) {
                client.getRequestUrlSuccess(result);
            }
        };

        async.getRequestUrl(callback);

    }


    public interface GetRequestUrlClient {

        public void getRequestUrlFailure(Throwable caught);

        public void getRequestUrlSuccess(String result);
    }

#foreach($e in $types)
#if(! ${e.getName().equals("User")})

    /**
     * Get the ${e.name} from the session
     */
    public void get${e.name}(final Get${e.name}Client client) {
        SessionServiceRemoteAsync async = GWT.create(SessionServiceRemote.class);
        AsyncCallback<${e.name}Proxy> callback = new AsyncCallback<${e.name}Proxy>() {

            @Override
            public void onFailure(Throwable caught) {
                if(caught.toString().indexOf("view: \"InvalidSessionView\"") > -1) {
                    navigate("invalidSession");
                } else {
                    client.get${e.name}Failure(caught);
                }
            }

            @Override
            public void onSuccess(${e.name}Proxy result) {
                client.get${e.name}Success(result);
            }
        };

        async.get${e.name}(callback);

    }


    public interface Get${e.name}Client {

        public void get${e.name}Failure(Throwable caught);

        public void get${e.name}Success(${e.name}Proxy result);
    }
#end
#end

    public native void navigate(String url) /*-{
        $wnd.location = "/cps-web/" + url;
    }-*/;
}