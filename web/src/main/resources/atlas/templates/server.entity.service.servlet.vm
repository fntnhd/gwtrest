package ${context.getProperty("namespace")}.server.service;

import ${context.getProperty("namespace")}.client.validate.*;
import ${context.getProperty("namespace")}.server.validate.*;
import ${context.getProperty("namespace")}.server.entity.*;
import ${context.getProperty("namespace")}.client.entity.*;
import ${context.getProperty("namespace")}.client.service.${type.name}DataServiceRemote;
import ${context.getProperty("namespace")}.server.transfer.*;
import java.util.ArrayList;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;

public class ${type.name}DataServiceServlet extends ServiceServlet implements ${type.name}DataServiceRemote {
#if(! ${type.isAbstractEntity()} )

    @Autowired
    private ${type.name}DAO dao;

    /**
     * Find All ${type.name}
     * @return List<${type.name}Proxy>
     */
    @Override
    public List<${type.name}Proxy> findAll${type.name}() throws ClientValidationException {
        try {
            List<${type.name}> ${util.uncapitalize(${type.name})}List = dao.findAll${type.name}();
            List<${type.name}Proxy> proxyList = new ArrayList<${type.name}Proxy>();
            ${type.name}Transfer transfer = new ${type.name}Transfer();
            for(${type.name} ${util.uncapitalize(${type.name})} : ${util.uncapitalize(${type.name})}List) {
                ${type.name}Proxy proxy = new ${type.name}Proxy();
                transfer.transferToProxy(proxy, ${util.uncapitalize(${type.name})});
                proxyList.add(proxy);
            }
            
            return proxyList;
        }
        catch(ValidationException ex) {
            List<ValidationErrorProxy> errorList = ValidationErrorTransfer.transferToProxy(ex.getErrors());
            throw new ClientValidationException(errorList);
        }
    }


    /**
     * Find ${type.name} By Id
     * @return ${type.name}
     */
    @Override
    public ${type.name}Proxy find${type.name}ById(Long id) throws ClientValidationException {
        try {
            ${type.name} user = dao.find${type.name}ById(id);
            if(user==null) {
                return null;
            }
            ${type.name}Proxy proxy = new ${type.name}Proxy();
            new ${type.name}Transfer().transferToProxy(proxy, user);
            return proxy;
        }
        catch(ValidationException ex) {
            List<ValidationErrorProxy> errorList = ValidationErrorTransfer.transferToProxy(ex.getErrors());
            throw new ClientValidationException(errorList);
        }
    }


    /**
     * Save ${type.name}
     * @return ${type.name}Proxy
     */
    @Override
    public ${type.name}Proxy save${type.name}(${type.name}Proxy ${util.uncapitalize(${type.name})}) throws ClientValidationException {
        try {
            ${type.name}Transfer transfer = new ${type.name}Transfer();
            ${type.name} e = new ${type.name}();
            transfer.transferFromProxy(${util.uncapitalize(${type.name})}, e);
            e = dao.save${type.name}(e);
            ${type.name}Proxy proxy = new ${type.name}Proxy();
            transfer.transferToProxy(proxy, e);
            
            return proxy;
        }
        catch(ValidationException ex) {
            List<ValidationErrorProxy> errorList = ValidationErrorTransfer.transferToProxy(ex.getErrors());
            throw new ClientValidationException(errorList);
        }
    }


    /**
     * Delete ${type.name}
     */
    @Override
    public void delete${type.name}(Long id) throws ClientValidationException {
        try {
            dao.delete${type.name}(id);
        }
        catch(ValidationException ex) {
            List<ValidationErrorProxy> errorList = ValidationErrorTransfer.transferToProxy(ex.getErrors());
            throw new ClientValidationException(errorList);
        }
    }
#if(${type.hasTag("businessKey")})
#set($businessKey = ${type.getTagValue("businessKey")})


    /**
     * Finds a ${type.name} by $businessKey
     * @return ${type.name}Proxy
     */
    @Override
    public ${type.name}Proxy find${type.name}By${util.capitalize($businessKey)}(String $businessKey) throws ClientValidationException {
        try {
            ${type.name} user = dao.find${type.name}By${util.capitalize($businessKey)}($businessKey);
            if(user==null) {
                return null;
            }
            ${type.name}Proxy proxy = new ${type.name}Proxy();
            new ${type.name}Transfer().transferToProxy(proxy, user);
            
            return proxy;
        }
        catch(ValidationException ex) {
            List<ValidationErrorProxy> errorList = ValidationErrorTransfer.transferToProxy(ex.getErrors());
            throw new ClientValidationException(errorList);
        }        
    }
#end
#end
}